---
interface Props {
  label: string;
  icon?: string;
  variant?: "primary" | "secondary" | "outline";
  size?: "sm" | "md" | "lg";
  href?: string;
  type?: "button" | "submit";
  disabled?: boolean;
  fullWidth?: boolean;
  onClick?: string;
}

const { 
  label, 
  icon, 
  variant = "primary",
  size = "md",
  href,
  type = "button",
  disabled = false,
  fullWidth = false,
  onClick
} = Astro.props;

// Variant styles
const variantStyles = {
  primary: "bg-pink-500 text-white hover:bg-pink-600 focus:ring-pink-500",
  secondary: "bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500",
  outline: "border border-gray-300 bg-white text-gray-900 hover:bg-gray-50 focus:ring-gray-500"
};

// Size styles
const sizeStyles = {
  sm: "px-3 py-1.5 text-xs",
  md: "px-4 py-2 text-sm",
  lg: "px-6 py-3 text-base"
};

const baseClasses = `${variantStyles[variant]} ${sizeStyles[size]} font-medium rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2`;
const widthClass = fullWidth ? "w-full" : "";
const disabledClass = disabled ? "opacity-50 cursor-not-allowed" : "";

const classes = `${baseClasses} ${widthClass} ${disabledClass}`;
---

{href ? (
  <a href={href} class={`inline-flex items-center justify-center ${classes}`}>
    {icon && <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" set:html={icon} />}
    {label}
  </a>
) : (
  <button 
    type={type} 
    disabled={disabled}
    class={`inline-flex items-center justify-center ${classes}`}
    {...(onClick && { "data-onclick": onClick })}
  >
    {icon && <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" set:html={icon} />}
    {label}
  </button>
)} 