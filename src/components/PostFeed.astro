---
import { getCollection } from "astro:content";
import Post from "./Post.astro";
import type { CollectionEntry } from "astro:content";

interface Props {
  limit?: number;
  showLoadMore?: boolean;
  compact?: boolean;
  showActions?: boolean;
}

const {
  limit = 10,
  showLoadMore = true,
  compact = false,
  showActions = true,
} = Astro.props;

// Get initial posts for SSR
const allPosts = await getCollection("posts");
const sortedPosts = allPosts.sort(
  (a: CollectionEntry<"posts">, b: CollectionEntry<"posts">) =>
    new Date(b.data.publishedAt).getTime() -
    new Date(a.data.publishedAt).getTime()
);

// Get posts for current page
const posts = sortedPosts.slice(0, limit);
const hasMorePosts = sortedPosts.length > limit;
---

<div class="divide-y divide-gray-200" id="post-feed">
  {
    posts.map((post) => (
      <Post post={post} showActions={showActions} compact={compact}>
        <div set:html={post.body} />
      </Post>
    ))
  }

  {
    showLoadMore && hasMorePosts && (
      <div class="p-4 text-center" id="load-more-container">
        <button
          id="load-more-btn"
          class="bg-pink-500 text-white hover:bg-pink-600 focus:ring-pink-500 px-4 py-2 text-sm font-medium rounded-full transition-colors"
          data-current-page="1"
          data-total-posts={sortedPosts.length}
        >
          Load more posts
        </button>
      </div>
    )
  }

  {
    posts.length === 0 && (
      <div class="p-8 text-center text-gray-500">
        <svg
          class="h-12 w-12 mx-auto mb-4 text-gray-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
          />
        </svg>
        <p class="text-lg font-medium">No posts yet</p>
        <p class="text-sm">Be the first to share something!</p>
      </div>
    )
  }
</div>

<script>
  // Client-side infinite scroll functionality
  const loadMoreBtn = document.getElementById(
    "load-more-btn"
  ) as HTMLButtonElement;
  const postFeed = document.getElementById("post-feed");
  const loadMoreContainer = document.getElementById("load-more-container");

  if (loadMoreBtn && postFeed && loadMoreContainer) {
    loadMoreBtn.addEventListener("click", async () => {
      const currentPage = parseInt(loadMoreBtn.dataset.currentPage || "1");
      const totalPosts = parseInt(loadMoreBtn.dataset.totalPosts || "0");
      const nextPage = currentPage + 1;

      // Show loading state
      loadMoreBtn.textContent = "Loading...";
      loadMoreBtn.disabled = true;

      try {
        // Fetch more posts from API
        const response = await fetch(
          `/api/posts.json?page=${nextPage}&limit=5`
        );
        const data = await response.json();

        if (data.posts && data.posts.length > 0) {
          // Create and append new posts
          data.posts.forEach((post: any) => {
            const postElement = createPostElement(post);
            postFeed.appendChild(postElement);
          });

          // Update button state
          loadMoreBtn.dataset.currentPage = nextPage.toString();

          if (!data.hasMore) {
            // Remove the load more button completely
            loadMoreContainer.remove();
          } else {
            // Update button text and re-enable
            loadMoreBtn.textContent = "Load more posts";
            loadMoreBtn.disabled = false;
          }
        } else {
          // Remove the load more button if no posts returned
          loadMoreContainer.remove();
        }
      } catch (error) {
        console.error("Error loading more posts:", error);
        loadMoreBtn.textContent = "Error loading posts";
        loadMoreBtn.disabled = false;
      }
    });
  }

  // Helper function to create post element
  function createPostElement(post: any) {
    const article = document.createElement("article");
    article.className =
      "border-b border-gray-200 p-4 hover:bg-gray-50 transition-colors";

    // Format date
    const formatDate = (date: Date) => {
      const now = new Date();
      const diffInHours = Math.floor(
        (now.getTime() - date.getTime()) / (1000 * 60 * 60)
      );

      if (diffInHours < 1) {
        const diffInMinutes = Math.floor(
          (now.getTime() - date.getTime()) / (1000 * 60)
        );
        return `${diffInMinutes}m`;
      } else if (diffInHours < 24) {
        return `${diffInHours}h`;
      } else {
        const diffInDays = Math.floor(diffInHours / 24);
        return `${diffInDays}d`;
      }
    };

    // Format numbers
    const formatNumber = (num: number) => {
      if (num >= 1000000) {
        return `${(num / 1000000).toFixed(1)}M`;
      } else if (num >= 1000) {
        return `${(num / 1000).toFixed(1)}K`;
      }
      return num.toString();
    };

    const publishedAt = new Date(post.data.publishedAt);

    article.innerHTML = `
      <div class="flex space-x-3">
        <div class="flex-shrink-0">
          <img 
            src="${post.data.author.avatar}" 
            alt="${post.data.author.name}"
            class="h-10 w-10 rounded-full object-cover"
          />
        </div>
        <div class="flex-1 min-w-0">
          <div class="flex items-center space-x-2 mb-1">
            <span class="font-semibold text-gray-900">${post.data.author.name}</span>
            ${post.data.author.verified ? '<svg class="h-4 w-4 text-blue-500" fill="currentColor" viewBox="0 0 24 24"><path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>' : ""}
            <span class="text-gray-500">${post.data.author.username}</span>
            <span class="text-gray-500">Â·</span>
            <span class="text-gray-500">${formatDate(publishedAt)}</span>
          </div>
          <div class="prose prose-sm max-w-none mb-3">
            ${post.body}
          </div>
          ${post.data.image ? `<div class="mb-3"><img src="${post.data.image}" alt="Post image" class="rounded-lg max-h-96 w-full object-cover" /></div>` : ""}
          <div class="flex items-center justify-between text-gray-500 text-sm">
            <button class="flex items-center space-x-2 hover:text-blue-500 transition-colors group">
              <div class="p-2 rounded-full group-hover:bg-blue-50">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                </svg>
              </div>
              <span>${formatNumber(post.data.replies)}</span>
            </button>
            <button class="flex items-center space-x-2 hover:text-green-500 transition-colors group">
              <div class="p-2 rounded-full group-hover:bg-green-50">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                </svg>
              </div>
              <span>${formatNumber(post.data.retweets)}</span>
            </button>
            <button class="flex items-center space-x-2 hover:text-red-500 transition-colors group">
              <div class="p-2 rounded-full group-hover:bg-red-50">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                </svg>
              </div>
              <span>${formatNumber(post.data.likes)}</span>
            </button>
            <button class="flex items-center space-x-2 hover:text-blue-500 transition-colors group">
              <div class="p-2 rounded-full group-hover:bg-blue-50">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
                </svg>
              </div>
            </button>
          </div>
        </div>
      </div>
    `;

    return article;
  }
</script>

